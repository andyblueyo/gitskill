library(jsonlite)
github.users <- fromJSON("data/data/users.json")
github.repos <- fromJSON("data/data/repos.json")
library(jsonlite)
library(tidyr)
library(dplyr)
github.users <- fromJSON("data/data/users.json")
github.repos <- fromJSON("data/data/repos.json")
git.repo.small <- head(github.repos, 200)
View(git.repo.small)
omg <- flatten(github.repos.small)
omg <- flatten(github.repo.small)
omg <- flatten(git.repo.small)
View(omg)
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("./data/repos.json")
user_data <- fromJSON("./data/users.json")
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("/data/repos.json")
user_data <- fromJSON("/data/users.json")
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("data/repos.json")
user_data <- fromJSON("data/users.json")
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("data/data/repos.json")
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("data/data/repos.json")
user_data <- fromJSON("data/data/users.json")
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("data/data/repos.json")
user_data <- fromJSON("data/data/users.json")
user_data_flat <- flatten(user_data, recursive = TRUE) #%>% sample_n(20, replace = FALSE)
repo_data_flat <- flatten(repo_data, recursive = TRUE) #%>% sample_n(20, replace = FALSE)
# View(user_data)
# View(repo_data)
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "languages", "ownerType")])
index <- 1
#Loop through language lists
for(language in df_repo$languages){
if(length(language)>0){
#If there are any languages in the list, get the name and the lines
lines <- language[,"lines"]
lang <- language[,"name"]
if(length(lang)>0){
for(i in 1:length(lang)){
print(index)
#Add cell in column of the language and index of the person we want
df_repo[index, lang[i]] <- lines[i]
}
}
}
index <- index + 1
}
# remove languages and set NAs to 0
drops <- c("languages")
df_repo2 <- df_repo[, !(names(df_repo) %in% drops)] #%>% apply(2,as.character)
df_repo2[is.na(df_repo2)] <- 0
# Group by user
df_repo2 <- df_repo2 %>%
group_by(ownerName, ownerType) %>%
summarize_all(funs(sum(as.numeric(.))))
#make column names match for merge
colnames(user_data_flat)[1] <- "ownerName"
#Select JUST Users (not orgs) from both dataframes
df_repo2 <- df_repo2 %>% filter(ownerType == "User")
user_data_df <- data.frame(user_data_flat[, c( "ownerName", "userType","publicRepos", "ownedPrivateRepos", "totalPrivateRepos")]) %>% filter(user_data_flat$userType == "User")
#Merge
merged_dfs <- merge(df_repo3, user_data_flat, by = "ownerName", all = TRUE)
colnames(df4)
View(df_repo)
View(language)
View(user_data_flat)
View(df_repo)
View(df_repo)
user_data_flat <- flatten(head(user_data, 100), recursive = TRUE) #%>% sample_n(20, replace = FALSE)
repo_data_flat <- flatten(head(repo_data, 100), recursive = TRUE) #%>% sample_n(20, replace = FALSE)
View(repo_data_flat)
View(user_data_flat)
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "languages", "ownerType")])
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
omg <- df_repo %>% unnest(languages)
View(omg)
library(dplyr)
library(jsonlite)
library(tidyr)
repo_data <- fromJSON("data/data/repos.json")
df_repo <- df_repo %>% unnest(languages) %>% group_by(name)
index <- 1
#Loop through language lists
for(language in df_repo$languages){
if(length(language)>0){
#If there are any languages in the list, get the name and the lines
lines <- language[,"lines"]
lang <- language[,"name"]
if(length(lang)>0){
for(i in 1:length(lang)){
print(index)
#Add cell in column of the language and index of the person we want
df_repo[index, lang[i]] <- lines[i]
}
}
}
index <- index + 1
}
# remove languages and set NAs to 0
drops <- c("languages")
df_repo2 <- df_repo[, !(names(df_repo) %in% drops)] #%>% apply(2,as.character)
df_repo2[is.na(df_repo2)] <- 0
# Group by user
df_repo2 <- df_repo2 %>%
group_by(ownerName, ownerType) %>%
summarize_all(funs(sum(as.numeric(.))))
#make column names match for merge
colnames(user_data_flat)[1] <- "ownerName"
#Select JUST Users (not orgs) from both dataframes
df_repo2 <- df_repo2 %>% filter(ownerType == "User")
user_data_df <- data.frame(user_data_flat[, c( "ownerName", "userType","publicRepos", "ownedPrivateRepos", "totalPrivateRepos")]) %>% filter(user_data_flat$userType == "User")
#Merge
merged_dfs <- merge(df_repo3, user_data_flat, by = "ownerName", all = TRUE)
colnames(df4)
View(df_repo)
df_repo <- df_repo %>% unnest(languages) %>% group_by(name)
df_repo <- df_repo %>% group_by(name)
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
index <- 1
#Loop through language lists
for(language in df_repo$languages){
if(length(language)>0){
#If there are any languages in the list, get the name and the lines
lines <- language[,"lines"]
lang <- language[,"name"]
if(length(lang)>0){
for(i in 1:length(lang)){
print(index)
#Add cell in column of the language and index of the person we want
df_repo[index, lang[i]] <- lines[i]
}
}
}
index <- index + 1
}
drops <- c("languages")
df_repo2 <- df_repo[, !(names(df_repo) %in% drops)
View(df_repo2)
View(df_repo2)
df_repo2[is.na(df_repo2)] <- 0
drops <- c("languages")
df_repo2 <- df_repo[, !(names(df_repo) %in% drops)] #%>% apply(2,as.character)
df_repo2[is.na(df_repo2)] <- 0
# Group by user
df_repo2 <- df_repo2 %>%
group_by(ownerName, ownerType) %>%
summarize_all(funs(sum(as.numeric(.))))
df_repo2 <- df_repo2 %>% filter(ownerType == "User")
user_data_df <- data.frame(user_data_flat[, c( "ownerName", "userType","publicRepos", "ownedPrivateRepos", "totalPrivateRepos")]) %>% filter(user_data_flat$userType == "User")
View(user_data_df)
merged_dfs <- merge(df_repo3, user_data_flat, by = "ownerName", all = TRUE)
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
df_repo <- df_repo %>% unnest(languages)
omg < - df_repo %>% group_by(name) %>% summarise_each(funs(sum))
omg < - df_repo %>%  summarise_each(funs(sum))
omg < - df_repo %>% summarise(sum = sum(lines))
omg < - df_repo %>% group_by(name) %>% summarise_all(sum)
omg <- df_repo %>% group_by(name) %>% summarise_all(sum)
?summarise_at
omg <- df_repo %>% group_by(name) %>% summarise_at(sum)
omg <- df_repo %>% group_by(name) %>% summarise_at(c("lines"), sum)
omg <- df_repo %>% group_by(name1) %>% summarise_at(c("lines"), sum)
omg <- df_repo %>% group_by(name, name1) %>% summarise_at(c("lines"), sum)
omg <- df_repo %>% group_by(ownerName, name1) %>% summarise_at(c("lines"), sum)
View(user_data_flat)
df_user <- repo_data_flat %>% select(ownerName, userType, publicRepos, orgs) %>% unnest(orgs)
df_user <- user_data_flat %>% select(ownerName, userType, publicRepos, orgs) %>% unnest(orgs)
df_user <- user_data_flat %>% select(ownerName, userType, publicRepos, orgs)
View(df_user)
omg <- df_user %>% unnest(orgs)
View(repo_data)
omg <- df_user %>% unnest(orgs)
omg <- df_user %>% flatten(orgs)
View(omg)
omg <- df_user %>% flatten()
omg <- df_user %>% unnest()
typeof(omg$orgs)
omg <- df_user %>% select(orgs) %>% unnest(orgs)
install.packages("purrr")
library(dplyr)
library(jsonlite)
library(tidyr)
library(purrr)
N
library(dplyr)
library(jsonlite)
library(tidyr)
library(purrr)
omg <- df_user %>% dmap(unlist)
omg <- df_user %>% map(unlist) %>% as_data_frame()
omg <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest()
View(omg)
df_user <- user_data_flat %>% filter(userType == "User") %>% select(ownerName, userType, publicRepos, orgs)
View(df_user)
df_user <- user_data_flat %>% filter(userType == "User") %>% select(ownerName, userType, publicRepos, orgs) %>% unnest(orgs)
df_user <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest()
typeof(omg$orgs)
df_user <- user_data_flat %>% filter(userType == "User") %>% select(ownerName, userType, publicRepos, orgs) %>% unnest(orgs)
df_user <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest()
df_user <- user_data_flat %>% filter(userType == "User") %>% select(ownerName, userType, publicRepos, orgs)
omg <- df_user %>% unnest()
ommmmg <- df_user %>% unnest()
df_useeeer <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest()
View(df_useeeer)
df_useeeer <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest() %>% right_join(select(df_user, ownerName))
dfeer <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest() %>% right_join(select(ownerName))
df_user <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest() %>% right_join(select(df_user, ownerName))
View(df_repo)
View(df_user)
oooo <- df_repo %>% filter(ownerType == "User")
View(repo_data)
oooo <- repo_data %>% filter(ownerType == "User")
oooo <- repo_data %>% select(ownerType) %>% filter(ownerType == "User")
View(oooo)
oooo <- repo_data %>% select(ownerType, ownerName) %>% filter(ownerType == "User") %>% filter(ownerName == "ob")
oooo <- repo_data %>% select(ownerType, ownerName, fullName) %>% filter(ownerType == "User") %>% filter(ownerName == "ob")
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% filter(ownerType == "User") %>% filter(ownerName == "ob")
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% filter(ownerName == "ob")
View(user_data)
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% filter(ownerName == "ob") %>% unnest(languages)
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>%
filter(ownerName == "ob") %>% unnest(languages) %>% summarise_at(c("lines"), sum)
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>%
filter(ownerName == "ob") %>% unnest(languages)
oooo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>%
filter(ownerName == "ob") %>% unnest(languages) %>%  group_by(ownerName, name1)%>% summarise_at(c("lines"), sum)
# Tidy repo data, unlist langauages and lines of code
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
df_repo <- df_repo %>% unnest(languages)
df_repo <- df_repo %>% group_by(ownerName, name1) %>% summarise_at(c("lines"), sum)
user_data_flat <- flatten(head(user_data, 1000), recursive = TRUE)
repo_data_flat <- flatten(head(repo_data, 1000), recursive = TRUE)
user_data_flat <- flatten(head(user_data, 1000))
repo_data_flat <- flatten(head(repo_data, 1000))
# Tidy repo data, unlist langauages and lines of code
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
df_repo <- df_repo %>% unnest(languages)
df_repo <- df_repo %>% group_by(ownerName, name1) %>% summarise_at(c("lines"), sum)
# Tidy data, unlist orgs, remove organizations
df_user <- user_data_flat %>% filter(userType == "User") %>% select(ownerName, userType, publicRepos, orgs)
df_user <- df_user %>% filter(!map_lgl(orgs, is.null)) %>% unnest() %>% right_join(select(df_user, ownerName))
df_user_repo <- repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% unnest(languages) %>%
group_by(ownerName, name1)%>% summarise_at(c("lines"), sum)
df_repoo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
repo_data_flat <- flatten(head(repo_data, 1000))
df_repoo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
df_user_repo <-  repo_data %>% select(ownerType, ownerName, fullName, name, languages)
df_user_repo <-  repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% unnest(languages)
View(repo_data)
View(df_user_repo)
ommmg <- df_user_repo %>% unnest(languages)
df_user_repo <-  repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% mutate(languages = as.character(languages))
df_user_repo <-  repo_data %>% select(ownerType, ownerName, fullName, name, languages) %>% mutate(languages = as.character(languages)) %>% unnest(languages)
df_repo <- data.frame(repo_data_flat[, c( "ownerName", "name", "languages", "ownerType")])
repo_data <- read.csv("merged_data.csv", stringsAsFactors = FALSE)
colnames(repo_data)
gather_data <- repo_data %>% select(-c(X)) %>% gather(language, line, Java:Zimpl)
count_lang <- gather_data %>% filter(line != 0) %>%  count(language)
library(dplyr)
library(tidyr)
library(ggplot2)
gather_data <- repo_data %>% select(-c(X)) %>% gather(language, line, Java:Zimpl)
count_lang <- gather_data %>% filter(line != 0) %>%  count(language)
View(gather_data)
total_lines <- gather_data %>% group_by(language) %>% summarise(total = sum(line))
View(total_lines)
total_lines <- gather_data %>% group_by(language) %>% summarise(total = sum(line), freq = n())
typeof(gather_data$line)
View(gather_data)
total_lines <- gather_data %>% filter(!is.null(line))
na.omit(gather_data)
pls <- na.omit(gather_data)
total_lines <- gather_data %>% filter(!is.null(line)) %>% group_by(language) %>% summarise(total = sum(line), freq = n())
total_lines <- pls %>% group_by(language) %>% summarise_at(c("line"), sum)
total_lines <- pls %>% group_by(language) %>% summarise_at(c("line", "stars"), sum)
total_lines <- pls %>% group_by(language) %>% summarise_at(c("stars"), sum)
View(pls)
total_lines <- pls %>% group_by(language) %>% summarise_at(c("stars", "lines"), sum)
total_lines <- pls %>% group_by(language) %>% summarise_at(c("stars", "line"), sum)
total_lines <- pls %>% group_by(language) %>% summarise_all(sum)
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise_all(sum)
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise(sum)
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise(total = sum(stars))
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise_at(c("stars"), sum)
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise_at(c("language"), sum)
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% group_by(language) %>% summarise_at(c("line"), sum)
total_lines$star
total_lines$stars
pls$stars
total_lines <- pls %>% select(language, stars, forks, line, publicRepos) %>% filter(stars != 0) %>% group_by(language) %>% summarise_at(c("stars"), sum)
# bar plot of freq of counts of language
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
count_lang <- pls %>% filter(line != 0) %>% count(language) %>% top_n(25, line)
count_lang <- pls %>% filter(line != 0) %>% count(language) %>% top_n(25)
View(count_lang)
count_lang <- pls %>% filter(line != 0) %>% count(language) %>% filter(line > 20000)
count_lang <- pls %>% filter(line != 0) %>% count(language)
pls <- na.omit(gather_data)
count_lang <- pls %>% filter(line != 0) %>% count(language)
count_lang <- gather_data %>% filter(line != 0) %>% count(language)
# bar plot of freq of counts of language
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 2000)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 1500)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 1000)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 1400)
# bar plot of freq of counts of language
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 5), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 1400)
bar_lang_count
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
count_lang <- gather_data %>% filter(line != 0) %>% group_by(language) %>% sum(stars)
count_lang <- gather_data %>% select(language, stars, forks, line, publicRepos) %>% filter(line != 0) %>% group_by(language) %>% sum(stars)
count_lang <- gather_data %>% select(language, stars, forks, line, publicRepos) %>% filter(line != 0) %>% group_by(language) %>% count(stars)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 2000)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 2500)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 3000)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 3500)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 3700)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 4000)
View(count_lang)
count_lang <- gather_data %>% filter(line != 0) %>% count(language) %>% filter(n > 4400)
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
bar_lang_count <- ggplot(data=count_lang, aes(x = language, y = n)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12), plot.title = element_text(hjust = 0.5)) + labs(x = "Languages", y = "Counts", title = "Frequency of Languages")
bar_lang_count
forks_star <- ggplot(data = gather_data, aes(x=forks, y = stars)) + geom_point()
forks_star
forks_star
forks_star <- ggplot(data = pls, aes(x=forks, y = stars)) + geom_point() + labs(x = "Number of forks", y = "Number of Stars", title = "Relationship with Stars and Forks")
